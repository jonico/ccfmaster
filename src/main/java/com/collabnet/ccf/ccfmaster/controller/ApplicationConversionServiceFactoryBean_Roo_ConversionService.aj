// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.collabnet.ccf.ccfmaster.controller;

import com.collabnet.ccf.ccfmaster.server.domain.CcfCoreStatus;
import com.collabnet.ccf.ccfmaster.server.domain.Direction;
import com.collabnet.ccf.ccfmaster.server.domain.DirectionConfig;
import com.collabnet.ccf.ccfmaster.server.domain.ExternalApp;
import com.collabnet.ccf.ccfmaster.server.domain.FieldMapping;
import com.collabnet.ccf.ccfmaster.server.domain.FieldMappingExternalAppTemplate;
import com.collabnet.ccf.ccfmaster.server.domain.FieldMappingLandscapeTemplate;
import com.collabnet.ccf.ccfmaster.server.domain.FieldMappingRule;
import com.collabnet.ccf.ccfmaster.server.domain.FieldMappingValueMap;
import com.collabnet.ccf.ccfmaster.server.domain.FieldMappingValueMapEntry;
import com.collabnet.ccf.ccfmaster.server.domain.HospitalEntry;
import com.collabnet.ccf.ccfmaster.server.domain.IdentityMapping;
import com.collabnet.ccf.ccfmaster.server.domain.Landscape;
import com.collabnet.ccf.ccfmaster.server.domain.LandscapeConfig;
import com.collabnet.ccf.ccfmaster.server.domain.Participant;
import com.collabnet.ccf.ccfmaster.server.domain.ParticipantConfig;
import com.collabnet.ccf.ccfmaster.server.domain.RepositoryMapping;
import com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirection;
import java.lang.String;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(new CcfCoreStatusConverter());
        registry.addConverter(new DirectionConverter());
        registry.addConverter(new DirectionConfigConverter());
        registry.addConverter(new ExternalAppConverter());
        registry.addConverter(new FieldMappingConverter());
        registry.addConverter(new FieldMappingExternalAppTemplateConverter());
        registry.addConverter(new FieldMappingLandscapeTemplateConverter());
        registry.addConverter(new FieldMappingRuleConverter());
        registry.addConverter(new FieldMappingValueMapConverter());
        registry.addConverter(new FieldMappingValueMapEntryConverter());
        registry.addConverter(new HospitalEntryConverter());
        registry.addConverter(new IdentityMappingConverter());
        registry.addConverter(new LandscapeConverter());
        registry.addConverter(new LandscapeConfigConverter());
        registry.addConverter(new ParticipantConverter());
        registry.addConverter(new ParticipantConfigConverter());
        registry.addConverter(new RepositoryMappingConverter());
        registry.addConverter(new RepositoryMappingDirectionConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.CcfCoreStatusConverter implements Converter<CcfCoreStatus, String>  {
        public String convert(CcfCoreStatus ccfCoreStatus) {
        return new StringBuilder().append(ccfCoreStatus.getCurrentStatus()).append(" ").append(ccfCoreStatus.getExecutedCommand()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.DirectionConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.Direction, java.lang.String>  {
        public String convert(Direction direction) {
        return new StringBuilder().append(direction.getDescription()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.DirectionConfigConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.DirectionConfig, java.lang.String>  {
        public String convert(DirectionConfig directionConfig) {
        return new StringBuilder().append(directionConfig.getName()).append(" ").append(directionConfig.getVal()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.ExternalAppConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.ExternalApp, java.lang.String>  {
        public String convert(ExternalApp externalApp) {
        return new StringBuilder().append(externalApp.getLinkId()).append(" ").append(externalApp.getProjectPath()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.FieldMappingConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.FieldMapping, java.lang.String>  {
        public String convert(FieldMapping fieldMapping) {
        return new StringBuilder().append(fieldMapping.getParam()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.FieldMappingExternalAppTemplateConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.FieldMappingExternalAppTemplate, java.lang.String>  {
        public String convert(FieldMappingExternalAppTemplate fieldMappingExternalAppTemplate) {
        return new StringBuilder().append(fieldMappingExternalAppTemplate.getName()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.FieldMappingLandscapeTemplateConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.FieldMappingLandscapeTemplate, java.lang.String>  {
        public String convert(FieldMappingLandscapeTemplate fieldMappingLandscapeTemplate) {
        return new StringBuilder().append(fieldMappingLandscapeTemplate.getName()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.FieldMappingRuleConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.FieldMappingRule, java.lang.String>  {
        public String convert(FieldMappingRule fieldMappingRule) {
        return new StringBuilder().append(fieldMappingRule.getName()).append(" ").append(fieldMappingRule.getDescription()).append(" ").append(fieldMappingRule.getSource()).append(" ").append(fieldMappingRule.getTarget()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.FieldMappingValueMapConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.FieldMappingValueMap, java.lang.String>  {
        public String convert(FieldMappingValueMap fieldMappingValueMap) {
        return new StringBuilder().append(fieldMappingValueMap.getName()).append(" ").append(fieldMappingValueMap.getDefaultValue()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.FieldMappingValueMapEntryConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.FieldMappingValueMapEntry, java.lang.String>  {
        public String convert(FieldMappingValueMapEntry fieldMappingValueMapEntry) {
        return new StringBuilder().append(fieldMappingValueMapEntry.getSource()).append(" ").append(fieldMappingValueMapEntry.getTarget()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.HospitalEntryConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.HospitalEntry, java.lang.String>  {
        public String convert(HospitalEntry hospitalEntry) {
        return new StringBuilder().append(hospitalEntry.getDescription()).append(" ").append(hospitalEntry.getTimestamp()).append(" ").append(hospitalEntry.getExceptionClassName()).append(" ").append(hospitalEntry.getExceptionMessage()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.IdentityMappingConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.IdentityMapping, java.lang.String>  {
        public String convert(IdentityMapping identityMapping) {
        return new StringBuilder().append(identityMapping.getDescription()).append(" ").append(identityMapping.getSourceArtifactId()).append(" ").append(identityMapping.getTargetArtifactId()).append(" ").append(identityMapping.getSourceLastModificationTime()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.LandscapeConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.Landscape, java.lang.String>  {
        public String convert(Landscape landscape) {
        return new StringBuilder().append(landscape.getName()).append(" ").append(landscape.getPlugId()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.LandscapeConfigConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.LandscapeConfig, java.lang.String>  {
        public String convert(LandscapeConfig landscapeConfig) {
        return new StringBuilder().append(landscapeConfig.getName()).append(" ").append(landscapeConfig.getVal()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.ParticipantConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.Participant, java.lang.String>  {
        public String convert(Participant participant) {
        return new StringBuilder().append(participant.getDescription()).append(" ").append(participant.getSystemId()).append(" ").append(participant.getEncoding()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.ParticipantConfigConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.ParticipantConfig, java.lang.String>  {
        public String convert(ParticipantConfig participantConfig) {
        return new StringBuilder().append(participantConfig.getName()).append(" ").append(participantConfig.getVal()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.RepositoryMappingConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.RepositoryMapping, java.lang.String>  {
        public String convert(RepositoryMapping repositoryMapping) {
        return new StringBuilder().append(repositoryMapping.getDescription()).append(" ").append(repositoryMapping.getTeamForgeRepositoryId()).append(" ").append(repositoryMapping.getParticipantRepositoryId()).toString();
        }
        
    }
    
    static class com.collabnet.ccf.ccfmaster.controller.ApplicationConversionServiceFactoryBean.RepositoryMappingDirectionConverter implements org.springframework.core.convert.converter.Converter<com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirection, java.lang.String>  {
        public String convert(RepositoryMappingDirection repositoryMappingDirection) {
        return new StringBuilder().append(repositoryMappingDirection.getLastSourceArtifactModificationDate()).append(" ").append(repositoryMappingDirection.getLastSourceArtifactVersion()).append(" ").append(repositoryMappingDirection.getLastSourceArtifactId()).toString();
        }
        
    }
    
}
