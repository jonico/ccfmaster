// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.collabnet.ccf.ccfmaster.server.domain;

import com.collabnet.ccf.ccfmaster.server.domain.ExternalApp;
import com.collabnet.ccf.ccfmaster.server.domain.RepositoryMapping;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect RepositoryMapping_Roo_Finder {
    
    public static TypedQuery<RepositoryMapping> RepositoryMapping.findRepositoryMappingsByExternalAppAndParticipantRepositoryIdAndTeamForgeRepositoryId(ExternalApp externalApp, String participantRepositoryId, String teamForgeRepositoryId) {
        if (externalApp == null) throw new IllegalArgumentException("The externalApp argument is required");
        if (participantRepositoryId == null || participantRepositoryId.length() == 0) throw new IllegalArgumentException("The participantRepositoryId argument is required");
        if (teamForgeRepositoryId == null || teamForgeRepositoryId.length() == 0) throw new IllegalArgumentException("The teamForgeRepositoryId argument is required");
        EntityManager em = RepositoryMapping.entityManager();
        TypedQuery<RepositoryMapping> q = em.createQuery("SELECT o FROM RepositoryMapping AS o WHERE o.externalApp = :externalApp AND o.participantRepositoryId = :participantRepositoryId AND o.teamForgeRepositoryId = :teamForgeRepositoryId", RepositoryMapping.class);
        q.setParameter("externalApp", externalApp);
        q.setParameter("participantRepositoryId", participantRepositoryId);
        q.setParameter("teamForgeRepositoryId", teamForgeRepositoryId);
        return q;
    }
    
}
