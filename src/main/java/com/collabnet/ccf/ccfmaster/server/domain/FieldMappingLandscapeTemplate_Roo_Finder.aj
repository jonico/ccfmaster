// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.collabnet.ccf.ccfmaster.server.domain;

import com.collabnet.ccf.ccfmaster.server.domain.Directions;
import com.collabnet.ccf.ccfmaster.server.domain.FieldMappingLandscapeTemplate;
import com.collabnet.ccf.ccfmaster.server.domain.Landscape;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect FieldMappingLandscapeTemplate_Roo_Finder {
    
    public static TypedQuery<FieldMappingLandscapeTemplate> FieldMappingLandscapeTemplate.findFieldMappingLandscapeTemplatesByDirection(Directions direction) {
        if (direction == null) throw new IllegalArgumentException("The direction argument is required");
        EntityManager em = FieldMappingLandscapeTemplate.entityManager();
        TypedQuery<FieldMappingLandscapeTemplate> q = em.createQuery("SELECT o FROM FieldMappingLandscapeTemplate AS o WHERE o.direction = :direction", FieldMappingLandscapeTemplate.class);
        q.setParameter("direction", direction);
        return q;
    }
    
    public static TypedQuery<FieldMappingLandscapeTemplate> FieldMappingLandscapeTemplate.findFieldMappingLandscapeTemplatesByParent(Landscape parent) {
        if (parent == null) throw new IllegalArgumentException("The parent argument is required");
        EntityManager em = FieldMappingLandscapeTemplate.entityManager();
        TypedQuery<FieldMappingLandscapeTemplate> q = em.createQuery("SELECT o FROM FieldMappingLandscapeTemplate AS o WHERE o.parent = :parent", FieldMappingLandscapeTemplate.class);
        q.setParameter("parent", parent);
        return q;
    }
    
    public static TypedQuery<FieldMappingLandscapeTemplate> FieldMappingLandscapeTemplate.findFieldMappingLandscapeTemplatesByParentAndDirection(Landscape parent, Directions direction) {
        if (parent == null) throw new IllegalArgumentException("The parent argument is required");
        if (direction == null) throw new IllegalArgumentException("The direction argument is required");
        EntityManager em = FieldMappingLandscapeTemplate.entityManager();
        TypedQuery<FieldMappingLandscapeTemplate> q = em.createQuery("SELECT o FROM FieldMappingLandscapeTemplate AS o WHERE o.parent = :parent AND o.direction = :direction", FieldMappingLandscapeTemplate.class);
        q.setParameter("parent", parent);
        q.setParameter("direction", direction);
        return q;
    }
    
    public static TypedQuery<FieldMappingLandscapeTemplate> FieldMappingLandscapeTemplate.findFieldMappingLandscapeTemplatesByParentAndNameAndDirection(Landscape parent, String name, Directions direction) {
        if (parent == null) throw new IllegalArgumentException("The parent argument is required");
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        if (direction == null) throw new IllegalArgumentException("The direction argument is required");
        EntityManager em = FieldMappingLandscapeTemplate.entityManager();
        TypedQuery<FieldMappingLandscapeTemplate> q = em.createQuery("SELECT o FROM FieldMappingLandscapeTemplate AS o WHERE o.parent = :parent AND o.name = :name AND o.direction = :direction", FieldMappingLandscapeTemplate.class);
        q.setParameter("parent", parent);
        q.setParameter("name", name);
        q.setParameter("direction", direction);
        return q;
    }
    
}
