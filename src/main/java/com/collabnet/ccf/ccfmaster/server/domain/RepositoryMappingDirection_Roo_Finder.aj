// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.collabnet.ccf.ccfmaster.server.domain;

import com.collabnet.ccf.ccfmaster.server.domain.Directions;
import com.collabnet.ccf.ccfmaster.server.domain.RepositoryMapping;
import com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirection;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect RepositoryMappingDirection_Roo_Finder {
    
    public static TypedQuery<RepositoryMappingDirection> RepositoryMappingDirection.findRepositoryMappingDirectionsByDirection(Directions direction) {
        if (direction == null) throw new IllegalArgumentException("The direction argument is required");
        EntityManager em = RepositoryMappingDirection.entityManager();
        TypedQuery<RepositoryMappingDirection> q = em.createQuery("SELECT o FROM RepositoryMappingDirection AS o WHERE o.direction = :direction", RepositoryMappingDirection.class);
        q.setParameter("direction", direction);
        return q;
    }
    
    public static TypedQuery<RepositoryMappingDirection> RepositoryMappingDirection.findRepositoryMappingDirectionsByRepositoryMapping(RepositoryMapping repositoryMapping) {
        if (repositoryMapping == null) throw new IllegalArgumentException("The repositoryMapping argument is required");
        EntityManager em = RepositoryMappingDirection.entityManager();
        TypedQuery<RepositoryMappingDirection> q = em.createQuery("SELECT o FROM RepositoryMappingDirection AS o WHERE o.repositoryMapping = :repositoryMapping", RepositoryMappingDirection.class);
        q.setParameter("repositoryMapping", repositoryMapping);
        return q;
    }
    
    public static TypedQuery<RepositoryMappingDirection> RepositoryMappingDirection.findRepositoryMappingDirectionsByRepositoryMappingAndDirection(RepositoryMapping repositoryMapping, Directions direction) {
        if (repositoryMapping == null) throw new IllegalArgumentException("The repositoryMapping argument is required");
        if (direction == null) throw new IllegalArgumentException("The direction argument is required");
        EntityManager em = RepositoryMappingDirection.entityManager();
        TypedQuery<RepositoryMappingDirection> q = em.createQuery("SELECT o FROM RepositoryMappingDirection AS o WHERE o.repositoryMapping = :repositoryMapping AND o.direction = :direction", RepositoryMappingDirection.class);
        q.setParameter("repositoryMapping", repositoryMapping);
        q.setParameter("direction", direction);
        return q;
    }
    
}
