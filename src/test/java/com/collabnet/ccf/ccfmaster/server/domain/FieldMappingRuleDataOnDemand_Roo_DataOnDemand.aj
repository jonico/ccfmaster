// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.collabnet.ccf.ccfmaster.server.domain;

import com.collabnet.ccf.ccfmaster.server.domain.FieldMappingRule;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect FieldMappingRuleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FieldMappingRuleDataOnDemand: @Component;
    
    private Random FieldMappingRuleDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<FieldMappingRule> FieldMappingRuleDataOnDemand.data;
    
    public FieldMappingRule FieldMappingRuleDataOnDemand.getNewTransientFieldMappingRule(int index) {
        com.collabnet.ccf.ccfmaster.server.domain.FieldMappingRule obj = new com.collabnet.ccf.ccfmaster.server.domain.FieldMappingRule();
        setName(obj, index);
        setDescription(obj, index);
        setType(obj, index);
        setSource(obj, index);
        setSourceIsTopLevelAttribute(obj, index);
        setTarget(obj, index);
        setTargetIsTopLevelAttribute(obj, index);
        setCondition(obj, index);
        setValueMapName(obj, index);
        setXmlContent(obj, index);
        return obj;
    }
    
    private void FieldMappingRuleDataOnDemand.setName(FieldMappingRule obj, int index) {
        java.lang.String name = "name_" + index;
        obj.setName(name);
    }
    
    private void FieldMappingRuleDataOnDemand.setDescription(FieldMappingRule obj, int index) {
        java.lang.String description = "description_" + index;
        obj.setDescription(description);
    }
    
    private void FieldMappingRuleDataOnDemand.setType(FieldMappingRule obj, int index) {
        com.collabnet.ccf.ccfmaster.server.domain.FieldMappingRuleType type = com.collabnet.ccf.ccfmaster.server.domain.FieldMappingRuleType.class.getEnumConstants()[0];
        obj.setType(type);
    }
    
    private void FieldMappingRuleDataOnDemand.setSource(FieldMappingRule obj, int index) {
        java.lang.String source = "source_" + index;
        obj.setSource(source);
    }
    
    private void FieldMappingRuleDataOnDemand.setSourceIsTopLevelAttribute(FieldMappingRule obj, int index) {
        java.lang.Boolean sourceIsTopLevelAttribute = true;
        obj.setSourceIsTopLevelAttribute(sourceIsTopLevelAttribute);
    }
    
    private void FieldMappingRuleDataOnDemand.setTarget(FieldMappingRule obj, int index) {
        java.lang.String target = "target_" + index;
        obj.setTarget(target);
    }
    
    private void FieldMappingRuleDataOnDemand.setTargetIsTopLevelAttribute(FieldMappingRule obj, int index) {
        java.lang.Boolean targetIsTopLevelAttribute = true;
        obj.setTargetIsTopLevelAttribute(targetIsTopLevelAttribute);
    }
    
    private void FieldMappingRuleDataOnDemand.setCondition(FieldMappingRule obj, int index) {
        java.lang.String condition = "condition_" + index;
        if (condition.length() > 1024) {
            condition = condition.substring(0, 1024);
        }
        obj.setCondition(condition);
    }
    
    private void FieldMappingRuleDataOnDemand.setValueMapName(FieldMappingRule obj, int index) {
        java.lang.String valueMapName = "valueMapName_" + index;
        obj.setValueMapName(valueMapName);
    }
    
    private void FieldMappingRuleDataOnDemand.setXmlContent(FieldMappingRule obj, int index) {
        java.lang.String xmlContent = "xmlContent_" + index;
        if (xmlContent.length() > 10485760) {
            xmlContent = xmlContent.substring(0, 10485760);
        }
        obj.setXmlContent(xmlContent);
    }
    
    public FieldMappingRule FieldMappingRuleDataOnDemand.getSpecificFieldMappingRule(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        FieldMappingRule obj = data.get(index);
        return FieldMappingRule.findFieldMappingRule(obj.getId());
    }
    
    public FieldMappingRule FieldMappingRuleDataOnDemand.getRandomFieldMappingRule() {
        init();
        FieldMappingRule obj = data.get(rnd.nextInt(data.size()));
        return FieldMappingRule.findFieldMappingRule(obj.getId());
    }
    
    public boolean FieldMappingRuleDataOnDemand.modifyFieldMappingRule(FieldMappingRule obj) {
        return false;
    }
    
    public void FieldMappingRuleDataOnDemand.init() {
        data = com.collabnet.ccf.ccfmaster.server.domain.FieldMappingRule.findFieldMappingRuleEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'FieldMappingRule' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.collabnet.ccf.ccfmaster.server.domain.FieldMappingRule>();
        for (int i = 0; i < 10; i++) {
            com.collabnet.ccf.ccfmaster.server.domain.FieldMappingRule obj = getNewTransientFieldMappingRule(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
