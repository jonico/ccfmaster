// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.collabnet.ccf.ccfmaster.server.domain;

import com.collabnet.ccf.ccfmaster.server.domain.DirectionConfig;
import com.collabnet.ccf.ccfmaster.server.domain.DirectionDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DirectionConfigDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DirectionConfigDataOnDemand: @Component;
    
    private Random DirectionConfigDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<DirectionConfig> DirectionConfigDataOnDemand.data;
    
    @Autowired
    private DirectionDataOnDemand DirectionConfigDataOnDemand.directionDataOnDemand;
    
    public DirectionConfig DirectionConfigDataOnDemand.getNewTransientDirectionConfig(int index) {
        com.collabnet.ccf.ccfmaster.server.domain.DirectionConfig obj = new com.collabnet.ccf.ccfmaster.server.domain.DirectionConfig();
        setDirection(obj, index);
        setName(obj, index);
        setVal(obj, index);
        return obj;
    }
    
    private void DirectionConfigDataOnDemand.setDirection(DirectionConfig obj, int index) {
        com.collabnet.ccf.ccfmaster.server.domain.Direction direction = directionDataOnDemand.getRandomDirection();
        obj.setDirection(direction);
    }
    
    private void DirectionConfigDataOnDemand.setName(DirectionConfig obj, int index) {
        java.lang.String name = "name_" + index;
        obj.setName(name);
    }
    
    private void DirectionConfigDataOnDemand.setVal(DirectionConfig obj, int index) {
        java.lang.String val = "val_" + index;
        if (val.length() > 10485760) {
            val = val.substring(0, 10485760);
        }
        obj.setVal(val);
    }
    
    public DirectionConfig DirectionConfigDataOnDemand.getSpecificDirectionConfig(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        DirectionConfig obj = data.get(index);
        return DirectionConfig.findDirectionConfig(obj.getId());
    }
    
    public DirectionConfig DirectionConfigDataOnDemand.getRandomDirectionConfig() {
        init();
        DirectionConfig obj = data.get(rnd.nextInt(data.size()));
        return DirectionConfig.findDirectionConfig(obj.getId());
    }
    
    public boolean DirectionConfigDataOnDemand.modifyDirectionConfig(DirectionConfig obj) {
        return false;
    }
    
    public void DirectionConfigDataOnDemand.init() {
        data = com.collabnet.ccf.ccfmaster.server.domain.DirectionConfig.findDirectionConfigEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'DirectionConfig' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.collabnet.ccf.ccfmaster.server.domain.DirectionConfig>();
        for (int i = 0; i < 10; i++) {
            com.collabnet.ccf.ccfmaster.server.domain.DirectionConfig obj = getNewTransientDirectionConfig(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
