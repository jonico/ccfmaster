// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.collabnet.ccf.ccfmaster.server.domain;

import com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirectionConfig;
import com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirectionDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RepositoryMappingDirectionConfigDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RepositoryMappingDirectionConfigDataOnDemand: @Component;
    
    private Random RepositoryMappingDirectionConfigDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<RepositoryMappingDirectionConfig> RepositoryMappingDirectionConfigDataOnDemand.data;
    
    @Autowired
    private RepositoryMappingDirectionDataOnDemand RepositoryMappingDirectionConfigDataOnDemand.repositoryMappingDirectionDataOnDemand;
    
    public RepositoryMappingDirectionConfig RepositoryMappingDirectionConfigDataOnDemand.getNewTransientRepositoryMappingDirectionConfig(int index) {
        com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirectionConfig obj = new com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirectionConfig();
        setRepositoryMappingDirection(obj, index);
        setName(obj, index);
        setVal(obj, index);
        return obj;
    }
    
    private void RepositoryMappingDirectionConfigDataOnDemand.setRepositoryMappingDirection(RepositoryMappingDirectionConfig obj, int index) {
        com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirection repositoryMappingDirection = repositoryMappingDirectionDataOnDemand.getRandomRepositoryMappingDirection();
        obj.setRepositoryMappingDirection(repositoryMappingDirection);
    }
    
    private void RepositoryMappingDirectionConfigDataOnDemand.setName(RepositoryMappingDirectionConfig obj, int index) {
        java.lang.String name = "name_" + index;
        obj.setName(name);
    }
    
    private void RepositoryMappingDirectionConfigDataOnDemand.setVal(RepositoryMappingDirectionConfig obj, int index) {
        java.lang.String val = "val_" + index;
        if (val.length() > 10485760) {
            val = val.substring(0, 10485760);
        }
        obj.setVal(val);
    }
    
    public RepositoryMappingDirectionConfig RepositoryMappingDirectionConfigDataOnDemand.getSpecificRepositoryMappingDirectionConfig(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        RepositoryMappingDirectionConfig obj = data.get(index);
        return RepositoryMappingDirectionConfig.findRepositoryMappingDirectionConfig(obj.getId());
    }
    
    public RepositoryMappingDirectionConfig RepositoryMappingDirectionConfigDataOnDemand.getRandomRepositoryMappingDirectionConfig() {
        init();
        RepositoryMappingDirectionConfig obj = data.get(rnd.nextInt(data.size()));
        return RepositoryMappingDirectionConfig.findRepositoryMappingDirectionConfig(obj.getId());
    }
    
    public boolean RepositoryMappingDirectionConfigDataOnDemand.modifyRepositoryMappingDirectionConfig(RepositoryMappingDirectionConfig obj) {
        return false;
    }
    
    public void RepositoryMappingDirectionConfigDataOnDemand.init() {
        data = com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirectionConfig.findRepositoryMappingDirectionConfigEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'RepositoryMappingDirectionConfig' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirectionConfig>();
        for (int i = 0; i < 10; i++) {
            com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirectionConfig obj = getNewTransientRepositoryMappingDirectionConfig(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
