// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.collabnet.ccf.ccfmaster.server.domain;

import com.collabnet.ccf.ccfmaster.server.domain.HospitalEntry;
import com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirectionDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HospitalEntryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HospitalEntryDataOnDemand: @Component;
    
    private Random HospitalEntryDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<HospitalEntry> HospitalEntryDataOnDemand.data;
    
    @Autowired
    private RepositoryMappingDirectionDataOnDemand HospitalEntryDataOnDemand.repositoryMappingDirectionDataOnDemand;
    
    public HospitalEntry HospitalEntryDataOnDemand.getNewTransientHospitalEntry(int index) {
        com.collabnet.ccf.ccfmaster.server.domain.HospitalEntry obj = new com.collabnet.ccf.ccfmaster.server.domain.HospitalEntry();
        setDescription(obj, index);
        setRepositoryMappingDirection(obj, index);
        setTimestamp(obj, index);
        setExceptionClassName(obj, index);
        setExceptionMessage(obj, index);
        setCauseExceptionClassName(obj, index);
        setCauseExceptionMessage(obj, index);
        setStackTrace(obj, index);
        setAdaptorName(obj, index);
        setOriginatingComponent(obj, index);
        setDataType(obj, index);
        setData(obj, index);
        setFixed(obj, index);
        setReprocessed(obj, index);
        setSourceArtifactId(obj, index);
        setTargetArtifactId(obj, index);
        setErrorCode(obj, index);
        setSourceLastModificationTime(obj, index);
        setTargetLastModificationTime(obj, index);
        setSourceArtifactVersion(obj, index);
        setTargetArtifactVersion(obj, index);
        setArtifactType(obj, index);
        setGenericArtifact(obj, index);
        return obj;
    }
    
    private void HospitalEntryDataOnDemand.setDescription(HospitalEntry obj, int index) {
        java.lang.String description = "description_" + index;
        obj.setDescription(description);
    }
    
    private void HospitalEntryDataOnDemand.setRepositoryMappingDirection(HospitalEntry obj, int index) {
        com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirection repositoryMappingDirection = repositoryMappingDirectionDataOnDemand.getRandomRepositoryMappingDirection();
        obj.setRepositoryMappingDirection(repositoryMappingDirection);
    }
    
    private void HospitalEntryDataOnDemand.setTimestamp(HospitalEntry obj, int index) {
        java.lang.String timestamp = "timestamp_" + index;
        if (timestamp.length() > 128) {
            timestamp = timestamp.substring(0, 128);
        }
        obj.setTimestamp(timestamp);
    }
    
    private void HospitalEntryDataOnDemand.setExceptionClassName(HospitalEntry obj, int index) {
        java.lang.String exceptionClassName = "exceptionClassName_" + index;
        if (exceptionClassName.length() > 256) {
            exceptionClassName = exceptionClassName.substring(0, 256);
        }
        obj.setExceptionClassName(exceptionClassName);
    }
    
    private void HospitalEntryDataOnDemand.setExceptionMessage(HospitalEntry obj, int index) {
        java.lang.String exceptionMessage = "exceptionMessage_" + index;
        if (exceptionMessage.length() > 65536) {
            exceptionMessage = exceptionMessage.substring(0, 65536);
        }
        obj.setExceptionMessage(exceptionMessage);
    }
    
    private void HospitalEntryDataOnDemand.setCauseExceptionClassName(HospitalEntry obj, int index) {
        java.lang.String causeExceptionClassName = "causeExceptionClassName_" + index;
        if (causeExceptionClassName.length() > 128) {
            causeExceptionClassName = causeExceptionClassName.substring(0, 128);
        }
        obj.setCauseExceptionClassName(causeExceptionClassName);
    }
    
    private void HospitalEntryDataOnDemand.setCauseExceptionMessage(HospitalEntry obj, int index) {
        java.lang.String causeExceptionMessage = "causeExceptionMessage_" + index;
        if (causeExceptionMessage.length() > 65536) {
            causeExceptionMessage = causeExceptionMessage.substring(0, 65536);
        }
        obj.setCauseExceptionMessage(causeExceptionMessage);
    }
    
    private void HospitalEntryDataOnDemand.setStackTrace(HospitalEntry obj, int index) {
        java.lang.String stackTrace = "stackTrace_" + index;
        if (stackTrace.length() > 65536) {
            stackTrace = stackTrace.substring(0, 65536);
        }
        obj.setStackTrace(stackTrace);
    }
    
    private void HospitalEntryDataOnDemand.setAdaptorName(HospitalEntry obj, int index) {
        java.lang.String adaptorName = "adaptorName_" + index;
        if (adaptorName.length() > 128) {
            adaptorName = adaptorName.substring(0, 128);
        }
        obj.setAdaptorName(adaptorName);
    }
    
    private void HospitalEntryDataOnDemand.setOriginatingComponent(HospitalEntry obj, int index) {
        java.lang.String originatingComponent = "originatingComponent_" + index;
        if (originatingComponent.length() > 128) {
            originatingComponent = originatingComponent.substring(0, 128);
        }
        obj.setOriginatingComponent(originatingComponent);
    }
    
    private void HospitalEntryDataOnDemand.setDataType(HospitalEntry obj, int index) {
        java.lang.String dataType = "dataType_" + index;
        if (dataType.length() > 128) {
            dataType = dataType.substring(0, 128);
        }
        obj.setDataType(dataType);
    }
    
    private void HospitalEntryDataOnDemand.setData(HospitalEntry obj, int index) {
        java.lang.String data = "data_" + index;
        if (data.length() > 65536) {
            data = data.substring(0, 65536);
        }
        obj.setData(data);
    }
    
    private void HospitalEntryDataOnDemand.setFixed(HospitalEntry obj, int index) {
        java.lang.Boolean fixed = Boolean.TRUE;
        obj.setFixed(fixed);
    }
    
    private void HospitalEntryDataOnDemand.setReprocessed(HospitalEntry obj, int index) {
        java.lang.Boolean reprocessed = Boolean.TRUE;
        obj.setReprocessed(reprocessed);
    }
    
    private void HospitalEntryDataOnDemand.setSourceArtifactId(HospitalEntry obj, int index) {
        java.lang.String sourceArtifactId = "sourceArtifactId_" + index;
        if (sourceArtifactId.length() > 128) {
            sourceArtifactId = sourceArtifactId.substring(0, 128);
        }
        obj.setSourceArtifactId(sourceArtifactId);
    }
    
    private void HospitalEntryDataOnDemand.setTargetArtifactId(HospitalEntry obj, int index) {
        java.lang.String targetArtifactId = "targetArtifactId_" + index;
        if (targetArtifactId.length() > 128) {
            targetArtifactId = targetArtifactId.substring(0, 128);
        }
        obj.setTargetArtifactId(targetArtifactId);
    }
    
    private void HospitalEntryDataOnDemand.setErrorCode(HospitalEntry obj, int index) {
        java.lang.String errorCode = "errorCode_" + index;
        if (errorCode.length() > 128) {
            errorCode = errorCode.substring(0, 128);
        }
        obj.setErrorCode(errorCode);
    }
    
    private void HospitalEntryDataOnDemand.setSourceLastModificationTime(HospitalEntry obj, int index) {
        java.util.Date sourceLastModificationTime = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setSourceLastModificationTime(sourceLastModificationTime);
    }
    
    private void HospitalEntryDataOnDemand.setTargetLastModificationTime(HospitalEntry obj, int index) {
        java.util.Date targetLastModificationTime = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTargetLastModificationTime(targetLastModificationTime);
    }
    
    private void HospitalEntryDataOnDemand.setSourceArtifactVersion(HospitalEntry obj, int index) {
        java.lang.String sourceArtifactVersion = "sourceArtifactVersion_" + index;
        if (sourceArtifactVersion.length() > 128) {
            sourceArtifactVersion = sourceArtifactVersion.substring(0, 128);
        }
        obj.setSourceArtifactVersion(sourceArtifactVersion);
    }
    
    private void HospitalEntryDataOnDemand.setTargetArtifactVersion(HospitalEntry obj, int index) {
        java.lang.String targetArtifactVersion = "targetArtifactVersion_" + index;
        if (targetArtifactVersion.length() > 128) {
            targetArtifactVersion = targetArtifactVersion.substring(0, 128);
        }
        obj.setTargetArtifactVersion(targetArtifactVersion);
    }
    
    private void HospitalEntryDataOnDemand.setArtifactType(HospitalEntry obj, int index) {
        java.lang.String artifactType = "artifactType_" + index;
        if (artifactType.length() > 128) {
            artifactType = artifactType.substring(0, 128);
        }
        obj.setArtifactType(artifactType);
    }
    
    private void HospitalEntryDataOnDemand.setGenericArtifact(HospitalEntry obj, int index) {
        java.lang.String genericArtifact = "genericArtifact_" + index;
        if (genericArtifact.length() > 10485760) {
            genericArtifact = genericArtifact.substring(0, 10485760);
        }
        obj.setGenericArtifact(genericArtifact);
    }
    
    public HospitalEntry HospitalEntryDataOnDemand.getSpecificHospitalEntry(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        HospitalEntry obj = data.get(index);
        return HospitalEntry.findHospitalEntry(obj.getId());
    }
    
    public HospitalEntry HospitalEntryDataOnDemand.getRandomHospitalEntry() {
        init();
        HospitalEntry obj = data.get(rnd.nextInt(data.size()));
        return HospitalEntry.findHospitalEntry(obj.getId());
    }
    
    public boolean HospitalEntryDataOnDemand.modifyHospitalEntry(HospitalEntry obj) {
        return false;
    }
    
    public void HospitalEntryDataOnDemand.init() {
        data = com.collabnet.ccf.ccfmaster.server.domain.HospitalEntry.findHospitalEntryEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'HospitalEntry' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.collabnet.ccf.ccfmaster.server.domain.HospitalEntry>();
        for (int i = 0; i < 10; i++) {
            com.collabnet.ccf.ccfmaster.server.domain.HospitalEntry obj = getNewTransientHospitalEntry(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
