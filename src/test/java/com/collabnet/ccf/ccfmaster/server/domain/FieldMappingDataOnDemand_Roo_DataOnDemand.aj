// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.collabnet.ccf.ccfmaster.server.domain;

import com.collabnet.ccf.ccfmaster.server.domain.FieldMapping;
import java.util.List;
import org.springframework.stereotype.Component;

privileged aspect FieldMappingDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FieldMappingDataOnDemand: @Component;
    
    private List<FieldMapping> FieldMappingDataOnDemand.data;
    
    private void FieldMappingDataOnDemand.setParent(FieldMapping obj, int index) {
        com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDirection parent = repositoryMappingDirectionDataOnDemand.getRandomRepositoryMappingDirection();
        obj.setParent(parent);
    }
    
    private void FieldMappingDataOnDemand.setScope(FieldMapping obj, int index) {
        com.collabnet.ccf.ccfmaster.server.domain.FieldMappingScope scope = com.collabnet.ccf.ccfmaster.server.domain.FieldMappingScope.class.getEnumConstants()[0];
        obj.setScope(scope);
    }
    
    private void FieldMappingDataOnDemand.setName(FieldMapping obj, int index) {
        java.lang.String name = "name_" + index;
        obj.setName(name);
    }
    
    private void FieldMappingDataOnDemand.setKind(FieldMapping obj, int index) {
        com.collabnet.ccf.ccfmaster.server.domain.FieldMappingKind kind = com.collabnet.ccf.ccfmaster.server.domain.FieldMappingKind.class.getEnumConstants()[0];
        obj.setKind(kind);
    }
    
    public FieldMapping FieldMappingDataOnDemand.getSpecificFieldMapping(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        FieldMapping obj = data.get(index);
        return FieldMapping.findFieldMapping(obj.getId());
    }
    
    public FieldMapping FieldMappingDataOnDemand.getRandomFieldMapping() {
        init();
        FieldMapping obj = data.get(rnd.nextInt(data.size()));
        return FieldMapping.findFieldMapping(obj.getId());
    }
    
    public void FieldMappingDataOnDemand.init() {
        data = com.collabnet.ccf.ccfmaster.server.domain.FieldMapping.findFieldMappingEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'FieldMapping' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.collabnet.ccf.ccfmaster.server.domain.FieldMapping>();
        for (int i = 0; i < 10; i++) {
            com.collabnet.ccf.ccfmaster.server.domain.FieldMapping obj = getNewTransientFieldMapping(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
