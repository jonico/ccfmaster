// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.collabnet.ccf.ccfmaster.server.domain;

import com.collabnet.ccf.ccfmaster.server.domain.IdentityMapping;
import com.collabnet.ccf.ccfmaster.server.domain.RepositoryMappingDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect IdentityMappingDataOnDemand_Roo_DataOnDemand {
    
    declare @type: IdentityMappingDataOnDemand: @Component;
    
    private Random IdentityMappingDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<IdentityMapping> IdentityMappingDataOnDemand.data;
    
    @Autowired
    private RepositoryMappingDataOnDemand IdentityMappingDataOnDemand.repositoryMappingDataOnDemand;
    
    public IdentityMapping IdentityMappingDataOnDemand.getNewTransientIdentityMapping(int index) {
        com.collabnet.ccf.ccfmaster.server.domain.IdentityMapping obj = new com.collabnet.ccf.ccfmaster.server.domain.IdentityMapping();
        setDescription(obj, index);
        setRepositoryMapping(obj, index);
        setSourceArtifactId(obj, index);
        setTargetArtifactId(obj, index);
        setSourceLastModificationTime(obj, index);
        setTargetLastModificationTime(obj, index);
        setSourceArtifactVersion(obj, index);
        setTargetArtifactVersion(obj, index);
        setArtifactType(obj, index);
        setDepChildSourceArtifactId(obj, index);
        setDepChildSourceRepositoryId(obj, index);
        setDepChildSourceRepositoryKind(obj, index);
        setDepChildTargetArtifactId(obj, index);
        setDepChildTargetRepositoryId(obj, index);
        setDepChildTargetRepositoryKind(obj, index);
        setDepParentSourceArtifactId(obj, index);
        setDepParentSourceRepositoryId(obj, index);
        setDepParentSourceRepositoryKind(obj, index);
        setDepParentTargetArtifactId(obj, index);
        setDepParentTargetRepositoryId(obj, index);
        setDepParentTargetRepositoryKind(obj, index);
        return obj;
    }
    
    private void IdentityMappingDataOnDemand.setDescription(IdentityMapping obj, int index) {
        java.lang.String description = "description_" + index;
        obj.setDescription(description);
    }
    
    private void IdentityMappingDataOnDemand.setRepositoryMapping(IdentityMapping obj, int index) {
        com.collabnet.ccf.ccfmaster.server.domain.RepositoryMapping repositoryMapping = repositoryMappingDataOnDemand.getRandomRepositoryMapping();
        obj.setRepositoryMapping(repositoryMapping);
    }
    
    private void IdentityMappingDataOnDemand.setSourceArtifactId(IdentityMapping obj, int index) {
        java.lang.String sourceArtifactId = "sourceArtifactId_" + index;
        if (sourceArtifactId.length() > 128) {
            sourceArtifactId = sourceArtifactId.substring(0, 128);
        }
        obj.setSourceArtifactId(sourceArtifactId);
    }
    
    private void IdentityMappingDataOnDemand.setTargetArtifactId(IdentityMapping obj, int index) {
        java.lang.String targetArtifactId = "targetArtifactId_" + index;
        if (targetArtifactId.length() > 128) {
            targetArtifactId = targetArtifactId.substring(0, 128);
        }
        obj.setTargetArtifactId(targetArtifactId);
    }
    
    private void IdentityMappingDataOnDemand.setSourceLastModificationTime(IdentityMapping obj, int index) {
        java.util.Date sourceLastModificationTime = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setSourceLastModificationTime(sourceLastModificationTime);
    }
    
    private void IdentityMappingDataOnDemand.setTargetLastModificationTime(IdentityMapping obj, int index) {
        java.util.Date targetLastModificationTime = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTargetLastModificationTime(targetLastModificationTime);
    }
    
    private void IdentityMappingDataOnDemand.setSourceArtifactVersion(IdentityMapping obj, int index) {
        java.lang.String sourceArtifactVersion = "sourceArtifactVersion_" + index;
        if (sourceArtifactVersion.length() > 128) {
            sourceArtifactVersion = sourceArtifactVersion.substring(0, 128);
        }
        obj.setSourceArtifactVersion(sourceArtifactVersion);
    }
    
    private void IdentityMappingDataOnDemand.setTargetArtifactVersion(IdentityMapping obj, int index) {
        java.lang.String targetArtifactVersion = "targetArtifactVersion_" + index;
        if (targetArtifactVersion.length() > 128) {
            targetArtifactVersion = targetArtifactVersion.substring(0, 128);
        }
        obj.setTargetArtifactVersion(targetArtifactVersion);
    }
    
    private void IdentityMappingDataOnDemand.setArtifactType(IdentityMapping obj, int index) {
        java.lang.String artifactType = "artifactType_" + index;
        if (artifactType.length() > 128) {
            artifactType = artifactType.substring(0, 128);
        }
        obj.setArtifactType(artifactType);
    }
    
    private void IdentityMappingDataOnDemand.setDepChildSourceArtifactId(IdentityMapping obj, int index) {
        java.lang.String depChildSourceArtifactId = "depChildSourceArtifactId_" + index;
        if (depChildSourceArtifactId.length() > 128) {
            depChildSourceArtifactId = depChildSourceArtifactId.substring(0, 128);
        }
        obj.setDepChildSourceArtifactId(depChildSourceArtifactId);
    }
    
    private void IdentityMappingDataOnDemand.setDepChildSourceRepositoryId(IdentityMapping obj, int index) {
        java.lang.String depChildSourceRepositoryId = "depChildSourceRepositoryId_" + index;
        if (depChildSourceRepositoryId.length() > 128) {
            depChildSourceRepositoryId = depChildSourceRepositoryId.substring(0, 128);
        }
        obj.setDepChildSourceRepositoryId(depChildSourceRepositoryId);
    }
    
    private void IdentityMappingDataOnDemand.setDepChildSourceRepositoryKind(IdentityMapping obj, int index) {
        java.lang.String depChildSourceRepositoryKind = "depChildSourceRepositoryKind_" + index;
        if (depChildSourceRepositoryKind.length() > 128) {
            depChildSourceRepositoryKind = depChildSourceRepositoryKind.substring(0, 128);
        }
        obj.setDepChildSourceRepositoryKind(depChildSourceRepositoryKind);
    }
    
    private void IdentityMappingDataOnDemand.setDepChildTargetArtifactId(IdentityMapping obj, int index) {
        java.lang.String depChildTargetArtifactId = "depChildTargetArtifactId_" + index;
        if (depChildTargetArtifactId.length() > 128) {
            depChildTargetArtifactId = depChildTargetArtifactId.substring(0, 128);
        }
        obj.setDepChildTargetArtifactId(depChildTargetArtifactId);
    }
    
    private void IdentityMappingDataOnDemand.setDepChildTargetRepositoryId(IdentityMapping obj, int index) {
        java.lang.String depChildTargetRepositoryId = "depChildTargetRepositoryId_" + index;
        if (depChildTargetRepositoryId.length() > 128) {
            depChildTargetRepositoryId = depChildTargetRepositoryId.substring(0, 128);
        }
        obj.setDepChildTargetRepositoryId(depChildTargetRepositoryId);
    }
    
    private void IdentityMappingDataOnDemand.setDepChildTargetRepositoryKind(IdentityMapping obj, int index) {
        java.lang.String depChildTargetRepositoryKind = "depChildTargetRepositoryKind_" + index;
        if (depChildTargetRepositoryKind.length() > 128) {
            depChildTargetRepositoryKind = depChildTargetRepositoryKind.substring(0, 128);
        }
        obj.setDepChildTargetRepositoryKind(depChildTargetRepositoryKind);
    }
    
    private void IdentityMappingDataOnDemand.setDepParentSourceArtifactId(IdentityMapping obj, int index) {
        java.lang.String depParentSourceArtifactId = "depParentSourceArtifactId_" + index;
        if (depParentSourceArtifactId.length() > 128) {
            depParentSourceArtifactId = depParentSourceArtifactId.substring(0, 128);
        }
        obj.setDepParentSourceArtifactId(depParentSourceArtifactId);
    }
    
    private void IdentityMappingDataOnDemand.setDepParentSourceRepositoryId(IdentityMapping obj, int index) {
        java.lang.String depParentSourceRepositoryId = "depParentSourceRepositoryId_" + index;
        if (depParentSourceRepositoryId.length() > 128) {
            depParentSourceRepositoryId = depParentSourceRepositoryId.substring(0, 128);
        }
        obj.setDepParentSourceRepositoryId(depParentSourceRepositoryId);
    }
    
    private void IdentityMappingDataOnDemand.setDepParentSourceRepositoryKind(IdentityMapping obj, int index) {
        java.lang.String depParentSourceRepositoryKind = "depParentSourceRepositoryKind_" + index;
        if (depParentSourceRepositoryKind.length() > 128) {
            depParentSourceRepositoryKind = depParentSourceRepositoryKind.substring(0, 128);
        }
        obj.setDepParentSourceRepositoryKind(depParentSourceRepositoryKind);
    }
    
    private void IdentityMappingDataOnDemand.setDepParentTargetArtifactId(IdentityMapping obj, int index) {
        java.lang.String depParentTargetArtifactId = "depParentTargetArtifactId_" + index;
        if (depParentTargetArtifactId.length() > 128) {
            depParentTargetArtifactId = depParentTargetArtifactId.substring(0, 128);
        }
        obj.setDepParentTargetArtifactId(depParentTargetArtifactId);
    }
    
    private void IdentityMappingDataOnDemand.setDepParentTargetRepositoryId(IdentityMapping obj, int index) {
        java.lang.String depParentTargetRepositoryId = "depParentTargetRepositoryId_" + index;
        if (depParentTargetRepositoryId.length() > 128) {
            depParentTargetRepositoryId = depParentTargetRepositoryId.substring(0, 128);
        }
        obj.setDepParentTargetRepositoryId(depParentTargetRepositoryId);
    }
    
    private void IdentityMappingDataOnDemand.setDepParentTargetRepositoryKind(IdentityMapping obj, int index) {
        java.lang.String depParentTargetRepositoryKind = "depParentTargetRepositoryKind_" + index;
        if (depParentTargetRepositoryKind.length() > 128) {
            depParentTargetRepositoryKind = depParentTargetRepositoryKind.substring(0, 128);
        }
        obj.setDepParentTargetRepositoryKind(depParentTargetRepositoryKind);
    }
    
    public IdentityMapping IdentityMappingDataOnDemand.getSpecificIdentityMapping(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        IdentityMapping obj = data.get(index);
        return IdentityMapping.findIdentityMapping(obj.getId());
    }
    
    public IdentityMapping IdentityMappingDataOnDemand.getRandomIdentityMapping() {
        init();
        IdentityMapping obj = data.get(rnd.nextInt(data.size()));
        return IdentityMapping.findIdentityMapping(obj.getId());
    }
    
    public boolean IdentityMappingDataOnDemand.modifyIdentityMapping(IdentityMapping obj) {
        return false;
    }
    
    public void IdentityMappingDataOnDemand.init() {
        data = com.collabnet.ccf.ccfmaster.server.domain.IdentityMapping.findIdentityMappingEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'IdentityMapping' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.collabnet.ccf.ccfmaster.server.domain.IdentityMapping>();
        for (int i = 0; i < 10; i++) {
            com.collabnet.ccf.ccfmaster.server.domain.IdentityMapping obj = getNewTransientIdentityMapping(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
